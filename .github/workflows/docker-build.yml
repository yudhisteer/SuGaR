# name: Build and Setup SuGaR

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     # Create Dockerfile if it doesn't exist
#     - name: Create Dockerfile
#       run: |
#         cat > Dockerfile << 'EOF'
#         FROM ubuntu:22.04
#         ENV DEBIAN_FRONTEND=noninteractive \
#             PATH="/usr/local/cuda/bin:$PATH" \
#             LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
#         RUN apt-get update && apt-get install -y --no-install-recommends \
#             wget \
#             curl \
#             git \
#             python3 \
#             python3-pip \
#             ffmpeg \
#             ca-certificates \
#             cmake \
#             ninja-build \
#             build-essential \
#             libboost-all-dev \
#             libeigen3-dev \
#             libflann-dev \
#             libfreeimage-dev \
#             libgoogle-glog-dev \
#             libgtest-dev \
#             libgmock-dev \
#             libsqlite3-dev \
#             libglew-dev \
#             qtbase5-dev \
#             libqt5opengl5-dev \
#             libcgal-dev \
#             libceres-dev \
#             freeglut3-dev \
#             libmetis-dev && \
#             rm -rf /var/lib/apt/lists/*
#         RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin && \
#             mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \
#             wget https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda-repo-ubuntu2204-11-8-local_11.8.0-520.61.05-1_amd64.deb && \
#             dpkg -i cuda-repo-ubuntu2204-11-8-local_11.8.0-520.61.05-1_amd64.deb && \
#             cp /var/cuda-repo-ubuntu2204-11-8-local/cuda-*-keyring.gpg /usr/share/keyrings/ && \
#             apt-get update && apt-get install -y --no-install-recommends cuda && \
#             rm -rf /var/lib/apt/lists/* /var/cuda-repo-ubuntu2204-11-8-local
#         RUN git clone --depth 1 https://github.com/colmap/colmap.git /tmp/colmap && \
#             cd /tmp/colmap && \
#             mkdir build && cd build && \
#             cmake .. -DCUDA_ENABLED=ON -DCMAKE_CUDA_ARCHITECTURES="70;72;75;80;86" -GNinja && \
#             ninja && ninja install && \
#             rm -rf /tmp/colmap
#         RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/*
#         WORKDIR /app
#         CMD ["bash"]
#         EOF

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Build and run Docker image
#       run: |
#         docker build -t sugar .
#         docker run -d --name sugar_container sugar tail -f /dev/null
#         docker exec sugar_container bash -c '
#           curl -O https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh &&
#           bash Anaconda3-2020.11-Linux-x86_64.sh -b -p /root/anaconda3 &&
#           echo "export PATH=/root/anaconda3/bin:$PATH" >> ~/.bashrc &&
#           source ~/.bashrc &&
#           git clone https://github.com/Anttwo/SuGaR &&
#           cd SuGaR &&
#           /root/anaconda3/bin/conda create -n sugar python=3.9 -y &&
#           /root/anaconda3/bin/conda run -n sugar conda install pytorch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 pytorch-cuda=11.8 -c pytorch -c nvidia -y &&
#           /root/anaconda3/bin/conda run -n sugar conda install -c fvcore -c iopath -c conda-forge fvcore iopath -y &&
#           /root/anaconda3/bin/conda run -n sugar conda install pytorch3d==0.7.4 -c pytorch3d -y &&
#           /root/anaconda3/bin/conda run -n sugar conda install -c plotly plotly -y &&
#           /root/anaconda3/bin/conda run -n sugar conda install -c conda-forge rich -y &&
#           /root/anaconda3/bin/conda run -n sugar conda install -c conda-forge plyfile==0.8.1 -y &&
#           /root/anaconda3/bin/conda run -n sugar conda install -c conda-forge jupyterlab -y &&
#           /root/anaconda3/bin/conda run -n sugar conda install -c conda-forge nodejs -y &&
#           /root/anaconda3/bin/conda run -n sugar conda install -c conda-forge ipywidgets -y &&
#           /root/anaconda3/bin/conda run -n sugar pip install open3d &&
#           /root/anaconda3/bin/conda run -n sugar pip install --upgrade PyMCubes &&
#           git clone https://github.com/NVlabs/nvdiffrast &&
#           cd nvdiffrast &&
#           /root/anaconda3/bin/conda run -n sugar pip install . &&
#           cd .. &&
#           cd gaussian_splatting/submodules/diff-gaussian-rasterization/ &&
#           /root/anaconda3/bin/conda run -n sugar pip install -e . &&
#           cd ../simple-knn/ &&
#           /root/anaconda3/bin/conda run -n sugar pip install -e . &&
#           cd ../../../
#         '

#     - name: Save Docker image
#       run: |
#         docker save sugar > sugar.tar

#     - name: Upload Docker image artifact
#       uses: actions/upload-artifact@v4
#       with:
#         name: sugar-docker-image
#         path: sugar.tar


name: Build and Setup SuGaR

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Create Dockerfile with COLMAP
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM ubuntu:22.04
        ENV DEBIAN_FRONTEND=noninteractive \
            PATH="/usr/local/cuda/bin:$PATH" \
            LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
        RUN apt-get update && apt-get install -y --no-install-recommends \
            wget \
            curl \
            git \
            python3 \
            python3-pip \
            ffmpeg \
            ca-certificates \
            cmake \
            ninja-build \
            build-essential \
            libboost-all-dev \
            libeigen3-dev \
            libflann-dev \
            libfreeimage-dev \
            libgoogle-glog-dev \
            libgtest-dev \
            libgmock-dev \
            libsqlite3-dev \
            libglew-dev \
            qtbase5-dev \
            libqt5opengl5-dev \
            libcgal-dev \
            libceres-dev \
            freeglut3-dev \
            libmetis-dev && \
            rm -rf /var/lib/apt/lists/*
        RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin && \
            mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \
            wget https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda-repo-ubuntu2204-11-8-local_11.8.0-520.61.05-1_amd64.deb && \
            dpkg -i cuda-repo-ubuntu2204-11-8-local_11.8.0-520.61.05-1_amd64.deb && \
            cp /var/cuda-repo-ubuntu2204-11-8-local/cuda-*-keyring.gpg /usr/share/keyrings/ && \
            apt-get update && apt-get install -y --no-install-recommends cuda && \
            rm -rf /var/lib/apt/lists/* /var/cuda-repo-ubuntu2204-11-8-local
        # Clone and build COLMAP
        RUN git clone --depth 1 https://github.com/colmap/colmap.git /tmp/colmap && \
            cd /tmp/colmap && \
            mkdir build && cd build && \
            cmake .. -DCUDA_ENABLED=ON -DCMAKE_CUDA_ARCHITECTURES="70;72;75;80;86" -GNinja && \
            ninja && ninja install && \
            rm -rf /tmp/colmap
        RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/*
        WORKDIR /app
        CMD ["bash"]
        EOF

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # First stage: Build base image with CUDA and COLMAP
    - name: Build base image
      run: |
        docker build -t sugar .

    # Second stage: Install Anaconda
    - name: Install Anaconda
      run: |
        docker run --name sugar_conda -d sugar tail -f /dev/null
        docker exec sugar_conda bash -c '
          curl -O https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh &&
          bash Anaconda3-2020.11-Linux-x86_64.sh -b -p /root/anaconda3 &&
          echo "export PATH=/root/anaconda3/bin:$PATH" >> ~/.bashrc &&
          source ~/.bashrc'
        docker commit sugar_conda sugar:anaconda
        docker rm -f sugar_conda

    # Third stage: Install PyTorch and basic dependencies
    - name: Install PyTorch dependencies
      run: |
        docker run --memory=24g --name sugar_pytorch -d sugar:anaconda tail -f /dev/null
        docker exec sugar_pytorch bash -c '
          /root/anaconda3/bin/conda create -n sugar python=3.9 -y &&
          /root/anaconda3/bin/conda run -n sugar conda install pytorch==2.0.1 -c pytorch -c nvidia -y'
        docker commit sugar_pytorch sugar:pytorch_base
        docker rm -f sugar_pytorch

    - name: Install PyTorch Vision and Audio
      run: |
        docker run --name sugar_pytorch_extra -d sugar:pytorch_base tail -f /dev/null
        docker exec sugar_pytorch_extra bash -c '
          /root/anaconda3/bin/conda run -n sugar conda install torchvision==0.15.2 torchaudio==2.0.2 -c pytorch -c nvidia -y'
        docker commit sugar_pytorch_extra sugar:pytorch_complete
        docker rm -f sugar_pytorch_extra

    # Fourth stage: Install remaining packages
    - name: Install remaining packages
      run: |
        docker run --name sugar_final -d sugar:pytorch tail -f /dev/null
        docker exec sugar_final bash -c '
          /root/anaconda3/bin/conda run -n sugar conda install -c plotly plotly -y &&
          /root/anaconda3/bin/conda run -n sugar conda install -c conda-forge rich -y &&
          /root/anaconda3/bin/conda run -n sugar conda install -c conda-forge plyfile==0.8.1 -y &&
          /root/anaconda3/bin/conda run -n sugar conda install -c conda-forge jupyterlab -y &&
          /root/anaconda3/bin/conda run -n sugar conda install -c conda-forge nodejs -y &&
          /root/anaconda3/bin/conda run -n sugar conda install -c conda-forge ipywidgets -y &&
          /root/anaconda3/bin/conda run -n sugar pip install open3d &&
          /root/anaconda3/bin/conda run -n sugar pip install --upgrade PyMCubes'
        docker commit sugar_final sugar:packages
        docker rm -f sugar_final

    # Final stage: Install NVDiffrast and other modules
    - name: Install final modules
      run: |
        docker run --name sugar_modules -d sugar:packages tail -f /dev/null
        docker exec sugar_modules bash -c '
          cd /app &&
          git clone https://github.com/Anttwo/SuGaR &&
          cd SuGaR &&
          git clone https://github.com/NVlabs/nvdiffrast &&
          cd nvdiffrast &&
          /root/anaconda3/bin/conda run -n sugar pip install . &&
          cd .. &&
          cd gaussian_splatting/submodules/diff-gaussian-rasterization/ &&
          /root/anaconda3/bin/conda run -n sugar pip install -e . &&
          cd ../simple-knn/ &&
          /root/anaconda3/bin/conda run -n sugar pip install -e . &&
          cd ../../../'
        docker commit sugar_modules sugar:final
        docker rm -f sugar_modules

    - name: Save Docker image
      run: |
        docker save sugar:final > sugar.tar
        
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: sugar-docker-image
        path: sugar.tar